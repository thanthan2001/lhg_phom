import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:get/get.dart';
import 'package:intl/intl.dart';
import 'package:lhg_phom/core/services/models/user/domain/usecase/get_user_use_case.dart';
import 'package:lhg_phom/core/services/models/user/model/user_model.dart';
import 'dart:convert';

import 'package:lhg_phom/core/services/rfid_service.dart';

import '../../../../core/services/dio.api.service.dart';

class LendGiveController extends GetxController {
  final GetuserUseCase _getuserUseCase;
  LendGiveController(this._getuserUseCase);
  final String baseUrl = dotenv.env['BASE_URL'] ?? '';
  final List<String> scannedEPCs = []; // danh s√°ch l∆∞u c√°c epc ƒë√£ qu√©t
  Timer? clearEpcTimer; // timer ƒë·ªÉ x√≥a m·∫£ng sau 10 ph√∫t
  // Text Controllers
  final sumController = TextEditingController();
  final dateController = TextEditingController();
  final userIDController = TextEditingController();
  final userNameController = TextEditingController();
  final rfidController = TextEditingController();
  late String? companyName;
  // Scroll Controllers
  final tableScrollController = ScrollController();
  var listTagRFID = [].obs;
  List<String> lastSizeList = [];
  // State
  final isLoading = false.obs;
  final selectedCodePhom = ''.obs;
  final selectedDepartment = ''.obs;
  final isLeftSide = true.obs;
  final isShowingDetail = false.obs;
  final scrollProgress = 0.0.obs;
  var selectedRowIndex = Rx<int?>(null);
  final LastSum = 0.obs;
  UserModel? user;
  // Dropdown data
  final codePhomList = ['AHGH', 'JHSG', 'ADTUH', 'KJAKJA', 'AHGGS', 'UHBV'];
  final departmentList = ['IT', 'HR', 'K3', 'SEA'];
  final List<String> headers = [
    'ID Bill',
    'Dep ID',
    'Last Mat No',
    'Last Name',
    'Last Size',
    'Last Sum',
    'Scanned',
  ];
  final epcDataTable = <Map<String, dynamic>>[].obs;

  final scanDate = DateFormat('yyyy-MM-dd').format(DateTime.now());
  late Map<String, dynamic> data = {
    "companyName": companyName,
    "ScanDate": scanDate,
    "DepID": selectedDepartment.value,
    "StateScan": "0",
  };
  // Table data
  var inventoryData = <List<String>>[].obs;
  var isAvalableScan = false.obs;
  // Logic
  void onScan() {
    isShowingDetail.value = true;
  }

  Future<void> onStop() async {
    await RFIDService.stopScan();
  }

  void onFinish() {
    Get.back();
  }

  bool isValidDate(String input) {
    try {
      final parts = input.split('/');
      if (parts.length != 3) return false;

      final day = int.parse(parts[0]);
      final month = int.parse(parts[1]);
      final year = int.parse(parts[2]);

      final inputDate = DateTime(year, month, day);
      final now = DateTime.now();

      if (inputDate.isBefore(DateTime(now.year, now.month, now.day))) {
        return false;
      }

      return true;
    } catch (e) {
      return false;
    }
  }

  Future<void> onClear() async {
    print("Clear action triggered");

    // 1. X√≥a danh s√°ch c√°c tag ƒë√£ qu√©t t·ª´ ƒë·∫ßu ƒë·ªçc RFID
    listTagRFID.clear();
    print("  - listTagRFID cleared.");

    // 2. X√≥a danh s√°ch chi ti·∫øt EPC t·ª´ server (n·∫øu b·∫°n d√πng n√≥)
    epcDataTable.clear();
    print("  - epcDataTable cleared.");

    // 3. Reset c·ªôt "Scanned" (index 6) v·ªÅ '0' cho t·∫•t c·∫£ c√°c d√≤ng hi·ªán c√≥ trong inventoryData
    if (inventoryData.isNotEmpty) {
      bool changed = false;
      for (int i = 0; i < inventoryData.length; i++) {
        // Ki·ªÉm tra xem d√≤ng c√≥ ƒë·ªß ph·∫ßn t·ª≠ v√† c·ªôt "Scanned" c√≥ kh√°c '0' kh√¥ng
        if (inventoryData[i].length > 6 && inventoryData[i][6] != '0') {
          inventoryData[i][6] = '0'; // Reset c·ªôt "Scanned"
          changed = true;
        }
      }
      if (changed) {
        inventoryData
            .refresh(); // C·∫ßn thi·∫øt ƒë·ªÉ UI c·∫≠p nh·∫≠t thay ƒë·ªïi trong inventoryData
        print(
          "  - 'Scanned' column in inventoryData reset to '0'. UI refreshed.",
        );
      } else {
        print(
          "  - 'Scanned' column in inventoryData was already '0' or inventoryData is empty.",
        );
      }
    } else {
      print("  - inventoryData is empty, nothing to reset in it.");
    }

    // 4. X√≥a danh s√°ch c√°c RFID ƒë√£ kh·ªõp v·ªõi inventoryData (lastSizeList)
    if (lastSizeList.isNotEmpty) {
      lastSizeList.clear();
      print("  - lastSizeList (matched RFIDs) cleared.");
    } else {
      print("  - lastSizeList was already empty.");
    }

    // 5. C√¢n nh·∫Øc reset c√°c gi√° tr·ªã kh√°c n·∫øu c·∫ßn thi·∫øt cho h√†nh ƒë·ªông "Clear" n√†y:
    // V√≠ d·ª•:
    // isAvalableScan.value = false; // N·∫øu vi·ªác clear n√†y l√†m cho vi·ªác qu√©t kh√¥ng c√≤n h·ª£p l·ªá
    // LastSum.value = 0; // N·∫øu LastSum n√™n ph·∫£n √°nh t·ªïng s·ªë l∆∞·ª£ng ch∆∞a qu√©t
    // selectedRowIndex.value = null;

    // update(); // `inventoryData.refresh()` ƒë√£ x·ª≠ l√Ω vi·ªác c·∫≠p nh·∫≠t UI cho b·∫£ng.
    // `update()` c√≥ th·ªÉ kh√¥ng c·∫ßn thi·∫øt n·∫øu c√°c state kh√°c b·∫°n mu·ªën reset ƒë·ªÅu l√† Rx.
    // N·∫øu c√≥ c√°c non-Rx state m√† UI ƒëang l·∫Øng nghe v√† c·∫ßn c·∫≠p nh·∫≠t, th√¨ h√£y d√πng.

    print("‚úÖ Clear action completed.");
    Get.snackbar("Th√¥ng b√°o", "ƒê√£ ƒë·∫∑t l·∫°i s·ªë l∆∞·ª£ng ƒë√£ qu√©t v√† danh s√°ch th·∫ª.");
  }

  // Future<void> sendEPCToServer(String epc) async {
  //   final data = {"companyName": companyName, "RFID": epc};
  //   print("data: $data");
  //   try {
  //     final response = await ApiService(
  //       baseUrl,
  //     ).post('/phom/getphomrfid', data);

  //     if (response.statusCode == 200) {
  //       final List<dynamic> jsonList = response.data['data'];
  //       print(jsonList);
  //       for (var item in jsonList) {
  //         if (item is Map<String, dynamic>) {
  //           epcDataTable.add(item); // ho·∫∑c x·ª≠ l√Ω t√πy logic
  //         }
  //       }
  //       print('‚úÖ D·ªØ li·ªáu tr·∫£ v·ªÅ: ${response.data}');
  //     } else {
  //       print('‚ùå G·ª≠i EPC th·∫•t b·∫°i: ${response.statusCode}');
  //     }
  //   } catch (e) {
  //     print('‚ùå L·ªói khi g·ª≠i EPC l√™n server: $e');
  //   }
  // }

  /// K·∫øt n·ªëi thi·∫øt b·ªã RFID
  Future<void> _connectRFID() async {
    try {
      final connected = await RFIDService.connect();
      if (connected) {
        print('‚úÖüíï ƒê√£ k·∫øt n·ªëi RFID th√†nh c√¥ng');
      } else {
        Get.snackbar('L·ªói', 'Kh√¥ng th·ªÉ k·∫øt n·ªëi thi·∫øt b·ªã RFID');
      }
    } catch (e) {
      print('‚ùå L·ªói k·∫øt n·ªëi RFID: $e');
      Get.snackbar('L·ªói', 'K·∫øt n·ªëi RFID th·∫•t b·∫°i: $e');
    }
  }

  /// Ng·∫Øt k·∫øt n·ªëi khi ƒë√≥ng controller
  Future<void> _disconnectRFID() async {
    try {
      await RFIDService.disconnect();
      print('‚úÖ Ng·∫Øt k·∫øt n·ªëi RFID');
    } catch (e) {
      print('‚ùå L·ªói ng·∫Øt k·∫øt n·ªëi: $e');
    }
  }

  Future<void> getDepartment() async {
    try {
      final data = {"companyName": companyName};
      print(baseUrl);
      var response = await ApiService(
        baseUrl,
      ).post('/phom/getDepartment', data);
      if (response.statusCode == 200) {
        final List<dynamic> jsonArray = response.data["data"]["jsonArray"];
        final List<String> departments =
            jsonArray.map((e) => e['ID'].toString()).toList();

        departmentList.assignAll(departments);

        if (departments.isNotEmpty) {
          selectedDepartment.value = departments.first;
        }
      }
    } catch (e) {
      print('L·ªói khi l·∫•y danh s√°ch ƒë∆°n v·ªã: $e');
    }
  }

  String convertDate(String inputDate) {
    final parts = inputDate.split('/');
    final day = parts[0].padLeft(2, '0');
    final month = parts[1].padLeft(2, '0');
    final year = parts[2];
    return "$year-$month-$day";
  }
  // List<Map<String, dynamic>> epcDataTable = [];
  // List<List<String>> inventoryData = [];

  // Future<void> sendEPCToServer(String epc) async {
  //   final data = {"companyName": companyName, "RFID": epc};
  //   print("data: $data");

  //   try {
  //     final response = await ApiService(
  //       baseUrl,
  //     ).post('/phom/getphomrfid', data);

  //     if (response.statusCode == 200) {
  //       final List<dynamic> jsonList = response.data['data'];
  //       print("jsonList: $jsonList");
  //       for (var item in jsonList) {
  //         if (item is Map<String, dynamic>) {
  //           epcDataTable.add(item); // L∆∞u d·ªØ li·ªáu RFID
  //         }
  //       }
  //       print('‚úÖ D·ªØ li·ªáu tr·∫£ v·ªÅ: ${response.data}');
  //     } else {
  //       print('‚ùå G·ª≠i EPC th·∫•t b·∫°i: ${response.statusCode}');
  //     }
  //   } catch (e) {
  //     print('‚ùå L·ªói khi g·ª≠i EPC l√™n server: $e');
  //   }
  // }
  Future<void> sendEPCToServer(String epc) async {
    final data = {"companyName": companyName, "RFID": epc};
    print("data for getphomrfid: $data"); // Log d·ªØ li·ªáu g·ª≠i ƒëi

    try {
      final response = await ApiService(
        baseUrl,
      ).post('/phom/getphomrfid', data);

      if (response.statusCode == 200) {
        final List<dynamic> jsonList = response.data['data'];
        print("jsonList from getphomrfid: $jsonList"); // Log d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c

        if (jsonList.isEmpty) {
          print("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt cho EPC: $epc");
          return;
        }

        bool inventoryUpdated =
            false; // C·ªù ƒë·ªÉ theo d√µi n·∫øu inventoryData ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t

        for (var item in jsonList) {
          // API c√≥ th·ªÉ tr·∫£ v·ªÅ m·ªôt list, th∆∞·ªùng th√¨ ch·ªâ 1 item cho 1 EPC
          if (item is Map<String, dynamic>) {
            // epcDataTable.add(item); // B·∫°n v·∫´n c√≥ th·ªÉ th√™m v√†o epcDataTable n·∫øu c·∫ßn d√πng ·ªü ƒë√¢u ƒë√≥

            String? epcLastMatNo = item['LastMatNo']?.toString();
            String RFID = item["RFID"];
            String? epcLastSize =
                item['LastSize']?.toString().trim(); // Trim ƒë·ªÉ ƒë·∫£m b·∫£o kh·ªõp

            if (epcLastMatNo == null || epcLastSize == null) {
              print(
                "‚ö†Ô∏è D·ªØ li·ªáu t·ª´ API cho EPC $epc thi·∫øu LastMatNo ho·∫∑c LastSize: $item",
              );
              continue; // B·ªè qua item n√†y n·∫øu thi·∫øu th√¥ng tin quan tr·ªçng
            }

            print(
              "üîé ƒêang t√¨m ki·∫øm trong inventoryData cho MatNo: $epcLastMatNo, Size: $epcLastSize",
            );

            // Duy·ªát qua inventoryData ƒë·ªÉ t√¨m d√≤ng kh·ªõp
            for (int i = 0; i < inventoryData.length; i++) {
              List<String> inventoryRow = inventoryData[i];
              // Gi·∫£ s·ª≠ c·∫•u tr√∫c c·ªßa inventoryRow kh·ªõp v·ªõi 'headers'
              // headers: ['ID Bill', 'Dep ID', 'Last Mat No', 'Last Name', 'Last Size', 'Last Sum', 'Scanned']
              // Indices:     0          1             2              3              4             5           6
              String inventoryMatNo = inventoryRow[2];
              String inventorySize =
                  inventoryRow[4].trim(); // Trim ƒë·ªÉ ƒë·∫£m b·∫£o kh·ªõp

              if (inventoryMatNo == epcLastMatNo &&
                  inventorySize == epcLastSize) {
                print("‚úÖ T√¨m th·∫•y d√≤ng kh·ªõp t·∫°i index $i: $inventoryRow");
                lastSizeList.add(RFID);
                int currentScannedCount = int.tryParse(inventoryRow[6]) ?? 0;
                currentScannedCount++;
                inventoryRow[6] = currentScannedCount.toString();

                // Quan tr·ªçng: ƒê·ªÉ GetX nh·∫≠n bi·∫øt s·ª± thay ƒë·ªïi trong m·ªôt item c·ªßa RxList<List<String>>
                // b·∫°n c·∫ßn g√°n l·∫°i item ƒë√≥ ho·∫∑c g·ªçi refresh() tr√™n RxList.
                // inventoryData[i] = inventoryRow; // C√°ch 1: G√°n l·∫°i (√≠t hi·ªáu qu·∫£ h∆°n n·∫øu nhi·ªÅu thay ƒë·ªïi)
                // Ho·∫∑c ƒë∆°n gi·∫£n l√† sau v√≤ng l·∫∑p g·ªçi inventoryData.refresh()
                inventoryUpdated = true;
                print(
                  "üìä C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng qu√©t cho d√≤ng $i th√†nh: $currentScannedCount",
                );
                // N·∫øu b·∫°n cho r·∫±ng m·ªôt EPC ch·ªâ kh·ªõp v·ªõi M·ªòT d√≤ng duy nh·∫•t trong inventoryData,
                // b·∫°n c√≥ th·ªÉ `break;` ·ªü ƒë√¢y ƒë·ªÉ t·ªëi ∆∞u.
                // break;
              }
            }
          }
        }
        print('last listttttttttttttttttttttttttttttttttttt ${lastSizeList}');
        if (inventoryUpdated) {
          inventoryData
              .refresh(); // B√°o cho GetX c·∫≠p nh·∫≠t UI l·∫Øng nghe inventoryData
          print("üîÑ UI inventoryData ƒë√£ ƒë∆∞·ª£c refresh.");
        }

        print('‚úÖ D·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ getphomrfid: ${response.data}');
      } else {
        print(
          '‚ùå G·ª≠i EPC th·∫•t b·∫°i (getphomrfid): ${response.statusCode}, ${response.data}',
        );
      }
    } catch (e, stackTrace) {
      print('‚ùå L·ªói khi g·ª≠i EPC l√™n server (getphomrfid): $e');
      print('Stack trace: $stackTrace');
    }
  }

  Future<void> onSearch() async {
    final newSelectedDate = convertDate(dateController.text);
    final data = {
      "companyName": companyName,
      "DateBorrow": newSelectedDate,
      "DepID": selectedDepartment.value,
      "UserID": userIDController.text,
      "LastMatNo": selectedCodePhom.value,
    };
    print(data);
    print(data["DateBorrow"]);

    var response = await ApiService(baseUrl).post('/phom/layphieumuon', data);
    if (response.statusCode == 200 && response.data["data"]["rowCount"] != 0) {
      isAvalableScan.value = true;
      print(response);
      final List<dynamic> jsonArray = response.data["data"]["jsonArray"];
      print(jsonArray);
      inventoryData.clear();
      LastSum.value = 0;
      data["ID_bill"] = response.data["data"]["jsonArray"][0]['ID_bill'];
      // ID_Bill.value =
      //     response.data["data"]["jsonArray"][0]['ID_bill'].toString();
      for (var item in jsonArray) {
        LastSum.value += int.tryParse(item['LastSum']?.toString() ?? '0') ?? 0;
        inventoryData.add([
          item['ID_bill']?.toString() ?? '',
          item['DepID']?.toString() ?? '',
          item['LastMatNo']?.toString() ?? '',
          item['LastName']?.toString() ?? '',
          item['LastSize']?.toString().trim() ?? '',
          item['LastSum']?.toString() ?? '',
          '0',
        ]);
      }
      print(lastSizeList);
    } else {
      Get.snackbar('L·ªói', 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu');
    }
  }

  Future<void> getLastMatNo() async {
    try {
      final data = {"companyName": companyName};
      var response = await ApiService(baseUrl).post('/phom/getLastMatNo', data);
      if (response.statusCode == 200) {
        final List<dynamic> jsonArray = response.data["data"]["jsonArray"];
        final List<String> codePhom =
            jsonArray.map((e) => e['LastMatNo'].toString()).toList();

        codePhomList.assignAll(codePhom);

        if (codePhom.isNotEmpty) {
          selectedDepartment.value = codePhom.first;
        }
      }
    } catch (e) {
      print('L·ªói khi l·∫•y danh s√°ch m·∫∑t n·ª£: $e');
    }
  }

  //check exict tag in listTagRFID
  void checkAndAddNewTags(List<String> newTags) {
    final uniqueTags =
        newTags.where((tag) => !listTagRFID.contains(tag)).toList();

    if (uniqueTags.isNotEmpty) {
      listTagRFID.addAll(uniqueTags);
      for (String epc in uniqueTags) {
        sendEPCToServer(epc);
      }

      print('‚úÖ Th√™m tag m·ªõi & g·ª≠i server: $uniqueTags');
    } else {
      print('‚ö†Ô∏è T·∫•t c·∫£ tag ƒë√£ t·ªìn t·∫°i, kh√¥ng th√™m m·ªõi');
    }
  }

  Future<void> onScanMultipleTags() async {
    isLoading.value = true;
    if (isAvalableScan.value == false) {
      return null;
    }
    final user = await _getuserUseCase.getUser();
    print('user: ${user?.userId}');
    print('password: ${user?.password}');
    print('username: ${user?.userName}');
    try {
      final tags = await RFIDService.scanSingleTagMultiple(
        timeout: Duration(milliseconds: 100),
      );

      if (tags.isNotEmpty) {
        checkAndAddNewTags(tags);

        print('üìã T·ªïng listTagRFID: $listTagRFID + ${listTagRFID.length}');
        print("listTagRFID: $listTagRFID");
      } else {
        Get.snackbar('L·ªói', 'Kh√¥ng t√¨m th·∫•y th·∫ª n√†o');
      }
    } catch (e) {
      Get.snackbar('L·ªói', 'ƒê√£ x·∫£y ra l·ªói: $e');
    } finally {
      isLoading.value = false;
    }
  }

  // Future<void> onSave()async{
  //   for(item to)
  // }

  @override
  void onInit() async {
    super.onInit();

    // L·∫•y user t·ª´ usecase
    user = await _getuserUseCase.getUser();

    if (user == null) {
      print('‚ùå User null, kh√¥ng th·ªÉ kh·ªüi t·∫°o LendGiveController');
      Get.snackbar('L·ªói', 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng');
      return;
    }

    companyName = user!.companyName;
    print('‚úÖ CompanyName: $companyName');

    final today = DateTime.now();
    dateController.text = "${today.day}/${today.month}/${today.year}";

    await _connectRFID();
    await getDepartment();
    await getLastMatNo();
  }

  @override
  void onClose() {
    sumController.dispose();
    dateController.dispose();
    userIDController.dispose();
    rfidController.dispose();
    tableScrollController.dispose();
    super.onClose();
    _disconnectRFID();
  }
}
